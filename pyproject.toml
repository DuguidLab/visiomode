[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch]

[project]
name = "visiomode"
description = "An open-source platform for touchscreen-based visuomotor tasks in rodents."
readme = "README.md"
requires-python = ">=3.9"
license = { file = "LICENSE" }
authors = [
  { name = "Constantinos Eleftheriou", email = "Constantinos.Eleftheriou@ed.ac.uk" },
]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Framework :: Flask",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Medical Science Apps.",
  "Topic :: Software Development :: Libraries :: pygame",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3.9",
]
keywords = ["touchscreen", "rodent", "behaviour", "neuroscience"]
dependencies = [
  "Flask>=2.0.3",
  "PyYAML>=6.0",
  "Werkzeug>=2.2,<3.0",
  "pyserial>=3.5",
  "numpy>=1.22",
  "pygame>=2.5.1",
  "pynwb>=2.2.0",
]
dynamic = ["version"]

[project.urls]
Website = "https://www.visiomode.org"
Documentation = "https:/docs.visiomode.org"
Issues = "https://github.com/DuguidLab/visiomode/issues"
Source = "https://github.com/DuguidLab/visiomode"

[project.scripts]
visiomode = "visiomode:run"

[tool.hatch.build]
artifacts = ["*.png"]

[tool.hatch.build.targets.wheel]
packages = ["src/visiomode"]

[tool.hatch.build.targets.sdist]
exclude = ["/.github", "/docs"]

[tool.hatch.version]
path = "src/visiomode/__about__.py"

[tool.hatch.envs.default]
python = "3.9"

[tool.hatch.envs.develop]
python = "3.9"
dependencies = ["black", "pylint", "pre-commit"]

[tool.hatch.envs.docs]
dependencies = [
  "mkdocs",
  "mkdocs-material",
  "mkdocstrings-python",
  "pymdown-extensions",
  "material-plausible-plugin",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8000"
deploy = "mkdocs gh-deploy --force"

[tool.hatch.envs.tests]
dependencies = [
  "parameterized>=0.9.0"
]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/duguidlab_nwb tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.ruff]
target-version = "py311"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["visiomode"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
